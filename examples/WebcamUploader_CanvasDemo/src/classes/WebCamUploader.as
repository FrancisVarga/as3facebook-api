/*  Copyright (c) 2009, Adobe Systems Incorporated  All rights reserved.  Redistribution and use in source and binary forms, with or without   modification, are permitted provided that the following conditions are  met:  * Redistributions of source code must retain the above copyright notice,     this list of conditions and the following disclaimer.    * Redistributions in binary form must reproduce the above copyright    notice, this list of conditions and the following disclaimer in the     documentation and/or other materials provided with the distribution.    * Neither the name of Adobe Systems Incorporated nor the names of its     contributors may be used to endorse or promote products derived from     this software without specific prior written permission.  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS  IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO,  THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR  PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR   CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,  EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,  PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF  LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS  SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.*/package  {		import fl.controls.Button;	import fl.controls.TextArea;		import flash.display.LoaderInfo;	import flash.display.BitmapData;	import flash.display.Bitmap;	import flash.display.MovieClip;	import flash.display.Stage;	import flash.display.StageAlign;    import flash.display.StageScaleMode;		import flash.events.MouseEvent;	import flash.events.StatusEvent;	import flash.geom.Matrix;	import flash.media.Camera;	import flash.media.Video;	import flash.net.navigateToURL;	import flash.net.URLRequest;		import com.facebook.commands.profile.SetFBML;	import com.facebook.commands.photos.UploadPhoto;	import com.facebook.commands.users.HasAppPermission;	import com.facebook.data.BooleanResultData;	import com.facebook.data.auth.ExtendedPermissionValues;	import com.facebook.data.users.HasAppPermissionValues;	import com.facebook.errors.FacebookError;	import com.facebook.events.FacebookEvent;	import com.facebook.Facebook;	import com.facebook.session.WebSession;	import com.facebook.utils.FacebookSessionUtil;		public class WebCamUploader extends MovieClip {				// Constants:		protected static const API_KEY:String = 'YOUR_API_KEY'; // This needs to be replaced with your API key aquired on your application page.				// Protected Properties:		protected var spinner:Spinner;				protected var fbSessionUtil:FacebookSessionUtil;		protected var fb:Facebook;		protected var flashVarsParams:Object;				protected var video:Video;		protected var camera:Camera;		protected var bitmap:Bitmap;		protected var bitmapData:BitmapData;		protected var snapShot:BitmapData;						// Initialization:		public function WebCamUploader() { 			configUI();		}			// Protected Methods:		protected function configUI():void {			stage.scaleMode = StageScaleMode.NO_SCALE;			stage.align = StageAlign.TOP_LEFT;						// Get FlashVars			flashVarsParams = loaderInfo.parameters; // grab the secret key, session key, user id, friendsList...etc.						spinner = new Spinner();			spinner.x = 214 - spinner.width >> 1;			spinner.y = 255 - spinner.height - 40 >> 1;						uploadPic.addEventListener(MouseEvent.MOUSE_UP, uploadPhoto, false, 0, true);			deletePic.addEventListener(MouseEvent.MOUSE_UP, deletePhoto, false, 0, true);			errorDialog.addEventListener(MouseEvent.MOUSE_UP, closeErrorDialog, false, 0, true);			appAllowBtn.addEventListener(MouseEvent.MOUSE_UP, sendUserToAllowApp, false, 0, true);			permissionBtn.addEventListener(MouseEvent.MOUSE_UP, sendUserToPermissions, false, 0, true);			takePic.addEventListener(MouseEvent.MOUSE_UP, takeSnapShot, false, 0, true);						fbSessionUtil = new FacebookSessionUtil(API_KEY, null, loaderInfo); // Auto-determines session type from loaderInfo,																				// null refers to the secretKey, which is stored in loaderInfo to protected from decompilation			fbSessionUtil.addEventListener(FacebookEvent.CONNECT, onFacebookConnect, false, 0, true);						//Store of a refernce to Facebook, to allow for easier API calls.			fb = fbSessionUtil.facebook;						isAppAllowed(flashVarsParams.fb_sig_session_key);		}				protected function isAppAllowed(p_sigSessionKey:String):void {			if (p_sigSessionKey != null) {				setAppState("unblock");				fbSessionUtil.verifySession();							} else {				handleError(false, "We need you to allow the app to access your info");				setAppState("block");			}		}				protected function onFacebookConnect(p_event:FacebookEvent):void { 			if (p_event.success){ // Succesfully logged in, & have valid authentication for your session type				checkPermissions();				setApplicationFBML();			} else {				handleError(p_event.success, "Error, Cannot Connect to Facebook");				setAppState("block");			}		}				protected function sendUserToPermissions(p_event:MouseEvent):void { 			fb.grantExtendedPermission(ExtendedPermissionValues.PHOTO_UPLOAD); // extended permission to upload straight to album, skipping approval of upload		}				protected function setApplicationFBML():void { // requirements to embed app in a Facebook Canvas			/**			* Set the swfsrc and imgsrc to an URL on your server.			* 			*/			var profile_wide:String = "<fb:swf swfsrc='webcamUploader.swf' imgsrc='webcamUploader.jpg' swfbgcolor='006599'  id='simpleApp' width='214' height='255' />";			var profile_narrow:String = "<fb:swf swfsrc='webcamUploader.swf' imgsrc='webcamUploader.jpg' swfbgcolor='006599'  id='simpleApp' width='100%' height='255' />";            var call:SetFBML = new SetFBML(null, null, profile_narrow, null, profile_wide);			call.addEventListener(FacebookEvent.COMPLETE, onAppInstantiated, false, 0, true);			fb.post(call);		}				protected function onAppInstantiated(p_event:FacebookEvent):void {			if (p_event.success) {				// Success				if (stage.stageWidth < 214) {					handleError(false, "Cannot execute application. \nPlease move to a wider area.");					disableApp();				} else if (stage.stageWidth >= 214) {					connectCamera();					snapShot = new BitmapData(video.width, video.height);					bitmap = new Bitmap(snapShot);						setAppState("default");				}							} else {				handleError(p_event.success, "Error, Application FBML Call did not Work");			}					}				protected function checkPermissions():void {			var call:HasAppPermission = new HasAppPermission(HasAppPermissionValues.PHOTO_UPLOAD);			call.addEventListener(FacebookEvent.COMPLETE, onPermissionDisclosed, false, 0, true);			fb.post(call);		}				protected function onPermissionDisclosed(p_event:FacebookEvent):void {			if (p_event.success && ((p_event.data as BooleanResultData).value)){				// Success				permissionBtn.visible = false;				permissionBtn.enabled = false;							} else {				permissionBtn.visible = true;				permissionBtn.enabled = true;			}		}				protected function sendUserToAllowApp(p_event:MouseEvent):void {			navigateToURL(new URLRequest("http://www.facebook.com/login.php?api_key="+API_KEY));		}				protected function connectCamera():void {			camera = Camera.getCamera();						if (camera != null) {                video = new Video(214, 160.5);				video.attachCamera(camera);				video.x = 0;				video.y = 26;				addChild(video);								camera.addEventListener(StatusEvent.STATUS, onCameraStatus, false, 0, true);            } else {                handleError(false, "Error, You need a camera.");            }		}				protected function disableApp():void {			errorDialog.removeEventListener(MouseEvent.MOUSE_UP, closeErrorDialog);			takePic.enabled = false;		}				protected function onCameraStatus(p_event:StatusEvent):void {			camera.removeEventListener(StatusEvent.STATUS, onCameraStatus);						switch (p_event.code) {				case "Camera.Muted":					handleError(false, "Error, Camera not found or denied. Unable to use Application. \nTo allow the Camera, reload the page.");					disableApp();				case "Camera.Unmuted":					// Camera accepted and Successfull;					break;			}		}				protected function takeSnapShot(p_event:MouseEvent):void {			setAppState("pictureTaken");						snapShot.draw(video, new Matrix());			bitmapData = snapShot;						bitmap.x = 0;			bitmap.y = 26;					addChild(bitmap);		}				protected function deletePhoto(p_event:MouseEvent):void {			setAppState("default");			removeChild(bitmap);		}				protected function uploadPhoto(p_event:MouseEvent):void {			setAppState("uploading");			showSpinner(true);						var call:UploadPhoto = new UploadPhoto(bitmapData);			call.addEventListener(FacebookEvent.COMPLETE, onPhotoUploadStatus, false, 0, true);			fb.post(call);					}				protected function onPhotoUploadStatus(p_event:FacebookEvent):void {			if (p_event.success) {				// Success				showSpinner(false);				uploadPic.label = "Upload Complete";				deletePhoto(null);			} else {				handleError(p_event.success, "Error, Photo Cannot be uploaded");			}					}				protected function handleError(p_success:Boolean, p_text:String=null):void {			if (p_success) {				// There was NO Error				errorDialog.x = 1000;				errorDialog.y = 1000;			} else {				addChild(errorDialog);				errorDialog.x = 0;				errorDialog.y = 0;				errorDialog.errorText.text = p_text;			}		}				protected function showSpinner(p_loading:Boolean):void {			if(p_loading) {				addChild(spinner);				spinner.play();			} else {				removeChild(spinner);				spinner.stop();			}		}				protected function closeErrorDialog(p_event:MouseEvent):void {			handleError(true);		}				protected function setAppState(p_state:String):void {			switch (p_state) {				case "default":					uploadPic.enabled = false;					deletePic.enabled = false;					takePic.enabled = true;					break;				case "pictureTaken":					uploadPic.label = "Upload";					uploadPic.enabled = true;					deletePic.enabled = true;					takePic.enabled = false;					break;				case "uploading":					uploadPic.enabled = false;					deletePic.enabled = false;					break;				case "block":					addChild(appAllowBtn);					appAllowBtn.enabled = true;					appAllowBtn.label = "Allow Access Now";					errorDialog.removeEventListener(MouseEvent.MOUSE_UP, closeErrorDialog);					break;				case "unblock":					appAllowBtn.enabled = false;					appAllowBtn.visible = false;					errorDialog.addEventListener(MouseEvent.MOUSE_UP, closeErrorDialog, false, 0, true);					break;			}		}	}}