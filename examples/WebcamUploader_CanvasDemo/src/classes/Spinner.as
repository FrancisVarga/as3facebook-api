/*  Copyright (c) 2009, Adobe Systems Incorporated  All rights reserved.  Redistribution and use in source and binary forms, with or without   modification, are permitted provided that the following conditions are  met:  * Redistributions of source code must retain the above copyright notice,     this list of conditions and the following disclaimer.    * Redistributions in binary form must reproduce the above copyright    notice, this list of conditions and the following disclaimer in the     documentation and/or other materials provided with the distribution.    * Neither the name of Adobe Systems Incorporated nor the names of its     contributors may be used to endorse or promote products derived from     this software without specific prior written permission.  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS  IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO,  THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR  PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR   CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,  EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,  PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF  LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS  SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.*/package {		import com.gskinner.motion.GTweeny;	import flash.display.Sprite;	import flash.utils.Timer;	import flash.events.TimerEvent;		public class Spinner extends Sprite {				private var fadeTimer:Timer;		private var tween:GTweeny;		private var _isPlaying:Boolean = false;				private var _tickColor:uint = 0x000000;		private var _numTicks:int = 12;		private var _size:Number = 40;		private var _tickWidth:Number = -1;		private var _speed:int = 1000;				public var fadeSpeed:int = -1;						public function Spinner() {			super();						createChildren();		}				protected function createChildren():void {			var r:Number = size / 2;			var a:Number = 2 * Math.PI / _numTicks; // angle between each tick			var tW:Number = (_tickWidth != -1) ? _tickWidth : size / 10;						var currAngle:Number = 0;			for (var i:int=0; i<_numTicks; i++) {				var xStart:Number = r + Math.sin(currAngle) * ((_numTicks + 2) * tW / 2 / Math.PI);				var yStart:Number = r - Math.cos(currAngle) * ((_numTicks + 2) * tW / 2 / Math.PI);				var xEnd:Number = r + Math.sin(currAngle) * (r - tW);				var yEnd:Number = r - Math.cos(currAngle) * (r - tW);								var t:Tick = new Tick (xStart, yStart, xEnd, yEnd, tW, tickColor);				t.alpha = 0.1;								addChild(t);								currAngle += a;			}		}				protected function redraw():void {			var wasPlaying:Boolean = _isPlaying;						stop();						while (numChildren) { removeChildAt(0); }						if (wasPlaying) { play(); }		}				public function set numTicks(p_value:Number):void {			if (p_value != _numTicks) {				_numTicks = p_value;				redraw();			}		}				public function get numTicks():Number { return _numTicks; }				public function set playing (p_value:Boolean):void {			p_value ? play() : stop();		}				public function get playing():Boolean { return _isPlaying; }				public function play():void {			if (!_isPlaying) {				fadeTimer = new Timer(speed / _numTicks, 0);				fadeTimer.addEventListener(TimerEvent.TIMER, onFadeTick);								fadeTimer.start();				_isPlaying = true;			}		}				public function set size(p_value:Number):void {			if (p_value != _size) {				_size = p_value;				redraw();			}		}				public function set speed(p_value:Number):void {			if (p_value != _speed) {				_speed = p_value;				fadeTimer.stop();				fadeTimer.delay = p_value / _numTicks;				fadeTimer.start();			}		}				public function get speed():Number { return _speed;	}				public function get size():Number { return _size; }				public function stop():void {			if (fadeTimer != null && fadeTimer.running) {				_isPlaying = false;				fadeTimer.stop();			}		}				public function set tickColor(p_value:uint):void {			if (p_value != _tickColor) {				_tickColor = p_value;				redraw();			}		}				public function get tickColor():uint { return _tickColor; }						protected function onFadeTick(p_event:TimerEvent):void {			var tickNum:int = int(fadeTimer.currentCount % _numTicks);						var t:Tick = getChildAt(tickNum) as Tick;			var d:Number = (fadeSpeed != -1) ? fadeSpeed : speed * 10 / 10000;			t.alpha = 1;						tween = new GTweeny(t, d, {alpha: 0.1}, {});		}			}	}import flash.display.Sprite;class Tick extends Sprite {		public function Tick(p_fromX:Number, p_fromY:Number, p_toX:Number, p_toY:Number, p_width:int, p_color:uint) {		graphics.lineStyle(p_width, p_color, 1, false, 'normal', 'rounded');		graphics.moveTo(p_fromX, p_fromY);		graphics.lineTo(p_toX, p_toY);	}	}