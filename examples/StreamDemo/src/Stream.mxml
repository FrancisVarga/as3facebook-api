<?xml version="1.0" encoding="utf-8"?>
<!--
  Copyright (c) 2009, Adobe Systems Incorporated
  All rights reserved.

  Redistribution and use in source and binary forms, with or without 
  modification, are permitted provided that the following conditions are
  met:

  * Redistributions of source code must retain the above copyright notice, 
    this list of conditions and the following disclaimer.
  
  * Redistributions in binary form must reproduce the above copyright
    notice, this list of conditions and the following disclaimer in the 
    documentation and/or other materials provided with the distribution.
  
  * Neither the name of Adobe Systems Incorporated nor the names of its 
    contributors may be used to endorse or promote products derived from 
    this software without specific prior written permission.

  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS
  IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO,
  THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
  PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR 
  CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
  EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
  PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
  LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
  SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
-->
<mx:WindowedApplication
	xmlns:mx="http://www.adobe.com/2006/mxml"
	xmlns:views="com.facebook.streamdemo.views.*"
	xmlns:local="*" xmlns:ui="com.gskinner.ui.*"
	xmlns:gcontrols="com.gskinner.controls.*"
	gripperStyleName="gripper"
	layout="absolute" width="600" backgroundColor="0xeeeeee" showFlexChrome='false'
	applicationComplete="init()" closing="onClosing(event)" resizing="onResizing(event)" preinitialize="preInit()"
	>
	
	<mx:Script>
		<![CDATA[
			import com.facebook.data.stream.StreamStoryData;
			import com.facebook.utils.DesktopSessionHelper;
			import mx.events.PropertyChangeEvent;
			import com.gskinner.screen.ScreenEdgeEvent;
			import com.facebook.streamdemo.ui.Assets;
			import com.facebook.data.batch.BatchResult;
			import com.facebook.commands.batch.BatchRun;
			import com.facebook.data.batch.BatchCollection;
			import com.facebook.errors.FacebookError;
			import com.facebook.streamdemo.pool.StreamRowPool;
			import com.facebook.streamdemo.controls.StreamRow;
			import com.facebook.streamdemo.pool.CommentRowPool;
			import com.facebook.streamdemo.controls.CommentRow;
			import com.facebook.streamdemo.data.FriendsModel;
			import com.facebook.streamdemo.dialogs.MessageWindow;
			import com.facebook.streamdemo.data.StreamModel;
			import com.facebook.streamdemo.events.StreamEvent;
			import com.gskinner.screen.ScreenEdgeState;
			import com.gskinner.screen.ScreenEdgeHelper;
			import com.chewtinfoil.utils.DateUtils;
			import com.gskinner.utils.NetworkStatus;
			import com.facebook.data.users.FacebookUser;
			import com.facebook.data.auth.ExtendedPermissionValues;
			import com.facebook.commands.users.HasAppPermission;
			import com.facebook.data.BooleanResultData;
			import com.facebook.data.StringResultData;
			import com.facebook.data.friends.GetLoggedInUserData;
			import mx.events.MenuEvent;
			import com.gskinner.toast.ToastManager;
			
			import mx.events.CloseEvent;
			import com.gskinner.filesystem.Preferences;
			import com.facebook.commands.users.GetLoggedInUser;
			import mx.containers.Panel;
			import mx.managers.PopUpManager;
			import mx.core.Window;
			import com.facebook.events.FacebookEvent;
			import com.facebook.session.DesktopSession;
			import com.facebook.Facebook;
			import flash.net.navigateToURL;
			
			protected const API_KEY:String = 'YOUR_API_KEY';
			
			//Native menu labels.
			protected const ABOUT_LBL:String = 'About';
			protected const HIDE_LBL:String = 'Hide';
			protected const SNAP_LBL:String = 'Snap to Screen Edges';
			protected const AUTO_HIDE_LBL:String = '   Auto-Hide if Snapped';
			protected const ALWAYS_TOP_LBL:String = 'Always on Top';
			protected const SHOW_ALERTS_LBL:String = 'Show Alerts';
			protected const QUIT_LBL:String = 'Quit';
			
			protected var facebook:Facebook;
			protected var dsSession:DesktopSession;
			
			//Menus
			protected var snapMenu:NativeMenuItem;
			protected var autoHideMenu:NativeMenuItem;
			protected var alwaysOnTopMenu:NativeMenuItem;
			protected var showAlertsMenu:NativeMenuItem;
			protected var appMenu:NativeMenu;
			
			protected var screenEdgeHelper:ScreenEdgeHelper;
			
			protected var desktopHelper:DesktopSessionHelper;
			
			[Bindable]
			protected var loggedInUser:FacebookUser;
			
			protected function onInvoke(p_event:InvokeEvent):void {
				if (screenEdgeHelper.snapSide != ScreenEdgeState.FREE) { screenEdgeHelper.toggleAutoHide(null); }
			}
			
			protected function preInit():void {
				//Create some Stream and comment rows. To have them ready for the stream drawing.
				var count:uint = 20;
				while (count--) {
					StreamRowPool.addRow(new StreamRow());					
					CommentRowPool.addRow(new CommentRow());
				}
			}
			
			protected function init():void {
				NativeApplication.nativeApplication.addEventListener(InvokeEvent.INVOKE, onInvoke);
				
				appMenu = new NativeMenu();
				appMenu.addEventListener(Event.SELECT, onMenuItemSelect);
				
				appMenu.addItem(new NativeMenuItem(this.ABOUT_LBL));
				appMenu.addItem(new NativeMenuItem(null, true));
				snapMenu = appMenu.addItem(new NativeMenuItem(this.SNAP_LBL));
				autoHideMenu = appMenu.addItem(new NativeMenuItem(this.AUTO_HIDE_LBL));
				alwaysOnTopMenu = appMenu.addItem(new NativeMenuItem(this.ALWAYS_TOP_LBL));
				showAlertsMenu = appMenu.addItem(new NativeMenuItem(this.SHOW_ALERTS_LBL));
				appMenu.addItem(new NativeMenuItem(null, true));
				appMenu.addItem(new NativeMenuItem(this.HIDE_LBL));
				appMenu.addItem(new NativeMenuItem(null, true));
				appMenu.addItem(new NativeMenuItem(this.QUIT_LBL));
				
				var icon:*;
				if (NativeApplication.supportsDockIcon) {
					icon = NativeApplication.nativeApplication.icon as DockIcon;
					icon.menu = appMenu;
				} else if (NativeApplication.supportsSystemTrayIcon) {
					icon = NativeApplication.nativeApplication.icon as SystemTrayIcon;
					icon.menu = appMenu;
				}
				
				var autoHide:Boolean = Preferences.getPref('autoHide') == null?false:Preferences.getPref('autoHide');
				var alwaysOnTop:Boolean = Preferences.getPref('alwaysOnTop') == null?true:Preferences.getPref('alwaysOnTop');
				var showAlerts:Boolean = Preferences.getPref('showAlerts') == null?true:Preferences.getPref('showAlerts');
				var snapToEdges:Boolean = Preferences.getPref('snapToEdges') == null?false:Preferences.getPref('snapToEdges');
				
				autoHideMenu.checked = autoHide
				autoHideMenu.enabled = snapToEdges;
				
				alwaysOnTopMenu.checked = alwaysOnTop;
				alwaysInFront = alwaysOnTop;
				  
				showAlertsMenu.checked = showAlerts;
				snapMenu.checked = snapToEdges;
				
				nativeApplication.menu = new NativeMenu();
				var streamMenu:NativeMenuItem = nativeApplication.menu.addItem(new NativeMenuItem('Facebook Stream API Demo'));
				streamMenu.submenu = appMenu;
				
				MessageWindow.parent = mainCanvas; // parent is the containing displayItem
				
				screenEdgeHelper = new ScreenEdgeHelper(mainCanvas, nativeWindow);
				screenEdgeHelper.addEventListener(ScreenEdgeEvent.DISABLE, disableDragging, false, 0, true);
				screenEdgeHelper.addEventListener(ScreenEdgeEvent.ENABLE, enableDragging, false, 0, true);
				
				screenEdgeHelper.autoHide = autoHide;
				screenEdgeHelper.snapEnabled = snapToEdges;
				
				facebook = new Facebook();
				facebook.addEventListener(FacebookEvent.LOGOUT, onFacebookLogout, false, 0, true);
				
				desktopHelper = new DesktopSessionHelper();
				desktopHelper.apiKey = API_KEY;
				desktopHelper.addEventListener(FacebookEvent.LOGIN_FAILURE, onLoginFailure, false, 0, true);
				desktopHelper.addEventListener(FacebookEvent.PERMISSIONS_LOADED, onPermissionsLoaded, false, 0, true);
				
				userNameTxt.enabled = false;
				
				FriendsModel.facebook = facebook;
				StreamModel.facebook = facebook;
				
				StreamModel.getInstance().addEventListener(StreamEvent.STREAM_LOAD, onStreamUpdate, false, 0, true);
				StreamModel.getInstance().addEventListener(StreamEvent.STREAM_LOAD_ERROR, onStreamUpdateError, false, 0, true);
				StreamModel.getInstance().addEventListener(StreamEvent.REFRESH, onRefresh, false, 0, true);
				
				FriendsModel.getInstance().addEventListener(StreamEvent.LOAD_FRIENDS, onFriendsLoad, false, 0, true);
				FriendsModel.getInstance().addEventListener(Event.CHANGE, onFriendsChange, false, 0, true);
				
				NetworkStatus.watchUrl('http://api.facebook.com/');
				NetworkStatus.addEventListener(NetStatusEvent.NET_STATUS, onNetworkChange)
				NetworkStatus.checkStatus();
				
				enableDragging(null);
				setRefreshButtonState('update');
				
				desktopHelper.login();
			}
			
		    protected function attemptLogin(event:Event = null):void {
		    	desktopHelper.login();
		    }		    
			
		    // Now fully authorized, we'll display our content
		    // And begin polling.
		    protected function fullyAuthorized():void {
			    dsSession = new DesktopSession(API_KEY, desktopHelper.sessionData.secret, desktopHelper.sessionData.session_key);
				facebook.startSession(dsSession);
				
				refreshBtn.enabled = true;
				
				notifierArea.show(facebook);
				miniStream.show();
				CommentRowPool.setDesktopHelper(desktopHelper);
				StreamRowPool.setDesktopHelper(desktopHelper);
				
				onFriendsLoad(null); //Refresh logged in user
				
				setLoginLogoutBtnState('logout');
		    }
			
			protected function enableDragging(event:ScreenEdgeEvent):void {
				dragArea.addEventListener(MouseEvent.MOUSE_DOWN, startDragging, false, 0, true);
			}
			
			protected function disableDragging(event:ScreenEdgeEvent):void {
				dragArea.removeEventListener(MouseEvent.MOUSE_DOWN, startDragging);
			}
			
			protected function startDragging(p_event:MouseEvent):void {
				nativeWindow.startMove();
				screenEdgeHelper.hideScreenEdgeWindow();
			}
			
			protected function onRefreshClick(event:Event = null):void {
				StreamModel.refresh();
				
				setRefreshButtonState('update');
			}
			
			protected function setLoginLogoutBtnState(state:String):void {
				loginLogoutBtn.removeEventListener(MouseEvent.CLICK, logout);
				loginLogoutBtn.removeEventListener(MouseEvent.CLICK, attemptLogin);
				
				switch (state) {
					case 'login':
						loginLogoutBtn.label = 'login';
						loginLogoutBtn.addEventListener(MouseEvent.CLICK, attemptLogin);
						break;
					case 'logout':
						loginLogoutBtn.label = 'logout';
						loginLogoutBtn.addEventListener(MouseEvent.CLICK, logout);
				}
				
				loginLogoutBtn.enabled = true;
			}
			
			protected function setRefreshButtonState(state:String):void {
				switch (state) {
					case 'update':
						refreshBtn.label = 'updating…';
						refreshBtn.enabled = false;
						break;
					case 'refresh':
						refreshBtn.label = 'refresh';
						refreshBtn.enabled = true;
						break;
				}
			}
			
			protected function onStreamUpdateError(event:StreamEvent):void {
				lastUpdateTxt.text = 'error updating stream';
				setRefreshButtonState('refresh');
				
				var fbError:FacebookError = event.data as FacebookError;
				
				switch (fbError.errorCode) {
					case 1:
					case 2:
					case 601:
						MessageWindow.show('Facebook is currently unavailable click Okay to try again.', 'Error', MessageWindow.OK, onRefreshClick); break;
					case 13:
						checkFQLError(fbError.errorMsg); break;
					case 102:
						MessageWindow.show('Your session has timed out, click Okay to login to Facebook.', 'Error', MessageWindow.OK, attemptLoginAfterSessionExpire);
						break;
					default:
						MessageWindow.show('There was an error loading your stream.  Click Okay to try again.', 'Error', MessageWindow.OK, onRefreshClick); break;
				}
			}
			
			protected function checkFQLError(error:String):void {
				if (error.indexOf('Calls to stream have exceeded the rate of 100 calls per 600 seconds.') != -1) {
					MessageWindow.show('Cannot refresh your Stream at this time, please try again later.', 'Error', MessageWindow.OK);
				} else if (error.indexOf('stream requires the read_stream extended permission.') != -1) {
					desktopHelper.revokePermissions([ExtendedPermissionValues.READ_STREAM]);
					onPermissionsLoaded(null);
				} else {
					MessageWindow.show('Facebook has encountered an unknown error please try again later.', 'Error', MessageWindow.OK);
				}
			}
			
			protected function attemptLoginAfterSessionExpire(event:CloseEvent):void {
				logout(null, false);
				attemptLogin(); 
			}
			
			protected function onStreamUpdate(event:StreamEvent):void {
				lastUpdateTxt.text = 'last updated: ' + DateUtils.toString(new Date(), 'h:mmtt').toLowerCase();
				setRefreshButtonState('refresh');
				
				MessageWindow.hide(); 
			}
			
			protected function onNetworkChange(event:NetStatusEvent=null):void {
				if (NetworkStatus.online) {
					StreamModel.resume();
					statusIndicator.styleName = 'onlineStatus';
				} else {
					StreamModel.pause();
					MessageWindow.show('You have disconnected', 'Offline', MessageWindow.OK, onNetworkChange);
					statusIndicator.styleName = 'offlineStatus';
				}
			}
			
			protected function onFriendsLoad(event:StreamEvent):void {
				onLoggedInUserChange(null);
			}
			
			protected function onFriendsChange(event:Event):void {
				onLoggedInUserChange(null);
			}
			
			protected function onLoggedInUserChange(event:PropertyChangeEvent):void {
				loggedInUser = FriendsModel.getFriend(desktopHelper.sessionData.uid);
				if (loggedInUser != null) {
					userNameTxt.enabled = loggedInUser.profile_url != null;
					userNameTxt.label = loggedInUser.name;
				}
			}
			
			protected function showAppMenu():void {
				var pnt:Point = new Point(appNameLbl.x + 10, appNameLbl.y + appNameLbl.height);
				appNameLbl.localToGlobal(pnt); 
				appMenu.display(stage, pnt.x, pnt.y);
			}
			
			protected function onMenuItemSelect(event:Event):void {
				switch (event.target.label) {
					case ABOUT_LBL: showAbout(); break;
					case SNAP_LBL: toggleSnap(); break;
					case HIDE_LBL: minimize(); break;
					case AUTO_HIDE_LBL: toggleAutoHidePref(); break;
					case ALWAYS_TOP_LBL: toggleAlwaysOnTop(); break;
					case SHOW_ALERTS_LBL: toggleShowAlerts(); break
					case QUIT_LBL: exit(); break;
				}
			}
			
			protected function showAbout():void {
				MessageWindow.show('Created by gskinner.com', 'About', MessageWindow.OK);
			}
			
			protected function toggleSnap():void {
				snapMenu.checked = !snapMenu.checked;
				screenEdgeHelper.snapEnabled = snapMenu.checked;
				autoHideMenu.checked = false;
				autoHideMenu.enabled = snapMenu.checked;
				
				if (screenEdgeHelper.hidden) {
					screenEdgeHelper.toggleAutoHide(null);
				}
				
				screenEdgeHelper.autoHide = autoHideMenu.checked;
			}
			
			protected function toggleAutoHidePref():void {
				if (screenEdgeHelper.hidden) {
					screenEdgeHelper.toggleAutoHide(null);
				}
				
				autoHideMenu.checked = !autoHideMenu.checked;
				screenEdgeHelper.autoHide = autoHideMenu.checked;
			}
			
			protected function toggleAlwaysOnTop():void {
				alwaysOnTopMenu.checked = !alwaysOnTopMenu.checked;
				alwaysInFront = alwaysOnTopMenu.checked; 
			}
			
			protected function toggleShowAlerts():void {
				showAlertsMenu.checked = !showAlertsMenu.checked;
				ToastManager.closeAll();
				if (showAlertsMenu.checked) {
					ToastManager.play();
				} else {
					ToastManager.pause();
				}
			}
			
			protected function onRefresh(event:StreamEvent):void {
				notifierArea.refresh();
			}
			
			protected function onResizing(p_event:NativeWindowBoundsEvent):void {
				if (headerSpacer.width <= 22) {
					nativeWindow.minSize = new Point(p_event.beforeBounds.width, 120);
				}
			}
			
			override public function exit():void {
				shutdown()
				super.exit();
			}
			
			protected function onClosing(p_event:Event):void {
				shutdown();
			}
			
			protected function shutdown():void {
				//Close any open windows, and prevent opening new ones. 
				desktopHelper.shutdown();
				
				//Hide any open Toast windows.
				ToastManager.closeAll();
				
				var openedWindows:Array = NativeApplication.nativeApplication.openedWindows.slice();
				while (openedWindows.length) { (openedWindows.pop() as NativeWindow).close(); }
				
				StreamModel.pause();
				notifierArea.close();
				miniStream.close();
				
				Preferences.setPref('autoHide', autoHideMenu.checked);
				Preferences.setPref('alwaysOnTop', alwaysOnTopMenu.checked);
				Preferences.setPref('showAlerts', showAlertsMenu.checked);
				Preferences.setPref('snapToEdges', snapMenu.checked);
				
				Preferences.save();
			}
			
			protected function onMinimizing(p_event:Event):void {
				nativeWindow.minimize();
			}
			
			protected function logout(event:MouseEvent, expireWebSession:Boolean =  true):void {
				if (expireWebSession) {
					facebook.logout();
					MessageWindow.show('Logging out of Facebook', 'Waiting', MessageWindow.MESSAGE, null, -1);
				}
				
				StreamModel.pause();
				
				refreshBtn.enabled = false;
				
				dsSession.session_key = null;
				dsSession.secret = null;
			}
			
			protected function onFacebookLogout(event:FacebookEvent):void {
				desktopHelper.logout();
				MessageWindow.show('You have been logged out of Facebook. To use this application you must be logged in.  To login again, click Okay.', 'Logged Out', MessageWindow.OK, attemptLogin);
				setLoginLogoutBtnState('login');
			}
			
			protected function showLoggedInUser():void {
				navigateToURL(new URLRequest(loggedInUser.profile_url));
			}
			
			protected function showFacebook():void {
				navigateToURL(new URLRequest('http://www.facebook.com'));
			}
			
			protected function showAIR():void {
				navigateToURL(new URLRequest('http://www.adobe.com/products/air/'));
			}
			
			protected function onLoginFailure(event:FacebookEvent):void {
				desktopHelper.login();
			}
			
			protected function onPermissionsLoaded(event:FacebookEvent):void {
				if (desktopHelper.checkPermission(ExtendedPermissionValues.READ_STREAM) && desktopHelper.checkPermission(ExtendedPermissionValues.PUBLISH_STREAM)) {
		      		fullyAuthorized();
		      	} else {
		      		desktopHelper.grantPermissions([ExtendedPermissionValues.READ_STREAM, ExtendedPermissionValues.PUBLISH_STREAM]);
		      	}
			}
		]]>
	</mx:Script>
	
	<mx:Style source="com/facebook/streamdemo/ui/styles.css" />
	
	<!-- Main app, used to set bg color on transparent app -->
	<mx:Canvas id="mainCanvas" autoLayout='true' horizontalScrollPolicy="off" width='100%' height = '100%' backgroundColor="0xFFFFFF" borderStyle="solid" borderThickness="1" borderColor="#BDC7D8"> 
			<!-- encompasses the rows of the application -->
			<mx:VBox height='100%' width='100%' verticalGap="0">
				
				<!-- entire top header, light blue -->
				<mx:HBox width = '100%' backgroundColor='#D8DFEA' height ='53' horizontalGap='0' id='dragArea'> 
					
					<!-- left margin beside dark blue -->
					<mx:Spacer width='10'/> 
					
					<!-- dark blue cap & refresh tool -->
					<mx:VBox width='100%' paddingLeft="0" verticalGap='0' horizontalAlign="left" height='100%'>
					
						<!-- dark blue cap -->
						<mx:HBox horizontalGap='0' paddingTop='8' verticalAlign="bottom" styleName="headerBg" height='30' width="100%" paddingLeft='10' paddingRight='10' paddingBottom='5' backgroundSize="100%">
							<mx:VBox verticalGap='0' height='21'>
								<mx:Canvas styleName="fbLogo" width='16' height='16' click="showFacebook()" buttonMode="true" useHandCursor="true" toolTip="Show Facebook.com" />
								<mx:Spacer height = '5'/>
							</mx:VBox>
							<mx:Spacer width='2'/>
							<mx:Button id="appNameLbl"  height='18' paddingLeft="0" paddingRight="0" styleName = 'logo' click="showAppMenu()" buttonMode="true" useHandCursor="true" label="Stream API Demo" paddingTop='2'/>
							<mx:Spacer width='100%' id="headerSpacer"/>
							<mx:Button height='18' styleName='logout' paddingRight="0" id="userNameTxt" buttonMode="true" useHandCursor="true" toolTip="Show Profile" enabled="{loggedInUser.profile_url != null}" label="{loggedInUser.name}" click="showLoggedInUser()" paddingTop='2'/>
							<mx:Label height='20' styleName='userName' visible="{userNameTxt.enabled}" text=" | " paddingTop='2'/>
							<mx:Button id="loginLogoutBtn" enabled="false" height='18' paddingLeft="0" paddingRight="0" styleName = 'logout' buttonMode="true" useHandCursor="true" label="" paddingTop='2'/>
						</mx:HBox>
						<mx:Button id="refreshBtn" label="refresh" paddingTop="4" paddingBottom="0" useHandCursor="{refreshBtn.enabled}" buttonMode="true" click="onRefreshClick()" styleName="refresh" />
					</mx:VBox>
					
					<mx:VBox width='120' height='100%' verticalGap="0" verticalScrollPolicy="off" horizontalScrollPolicy="off">
						
						<!-- Chrome buttons -->
						<mx:HBox horizontalGap='5' width='120' height='15' paddingTop='3'>
							<mx:Canvas width='100%' height='100%'/>
							<mx:Button id="closeBtn" buttonMode="true" useHandCursor="true" width="10" height="10" styleName="closeButton" click="close()" />
							<mx:Spacer width='2'/>
						</mx:HBox>
						
						<!-- notifier area -->
						<mx:HBox id = 'notifier' width='100%' height='100%' verticalScrollPolicy="off" horizontalScrollPolicy="off" horizontalGap="0">
							<mx:Spacer width='5'/>
							<views:NotifierArea id="notifierArea" width="130"/>
						</mx:HBox>
						
					</mx:VBox>
				</mx:HBox>
			
			<!-- Stream area -->
			<views:MiniStream id="miniStream" width="{width-2}" height="100%"/>
			
			<!-- Status bar -->
			<mx:HBox horizontalGap='0' width='100%' height='15' backgroundColor='#D9D9D9'>
				<mx:Canvas id="statusIndicator" width='50' height='15' styleName="onlineStatus"/>
				<mx:Spacer width='100%'/>
				<mx:Label id="lastUpdateTxt" styleName="updateTimeText" />
				<mx:Spacer width = '3'/>
				<mx:Button paddingBottom="0" paddingLeft="0" paddingRight="0" paddingTop="1" label="Powered by Adobe AIR" styleName="poweredByText" click="showAIR()" buttonMode="true" useHandCursor="true" />
				<mx:Image source="{Assets.airLogoSmall}" click="showAIR()" buttonMode="true" useHandCursor="true" />
				<mx:Spacer width = '15'/>
				<!--
				<mx:Box paddingLeft="0" paddingTop="0" paddingBottom="2" paddingRight="2">
					<mx:Image id="gripperBtn" styleName="gripper" source="{Assets.windowGrabber}" mouseDown="{this.startResize(NativeWindowResize.BOTTOM_RIGHT)}" />
				</mx:Box>
				-->
			</mx:HBox>
			
		</mx:VBox>
	</mx:Canvas>
</mx:WindowedApplication>
