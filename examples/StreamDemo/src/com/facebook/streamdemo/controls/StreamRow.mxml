<?xml version="1.0" encoding="utf-8"?>
<!--
  Copyright (c) 2009, Adobe Systems Incorporated
  All rights reserved.

  Redistribution and use in source and binary forms, with or without 
  modification, are permitted provided that the following conditions are
  met:

  * Redistributions of source code must retain the above copyright notice, 
    this list of conditions and the following disclaimer.
  
  * Redistributions in binary form must reproduce the above copyright
    notice, this list of conditions and the following disclaimer in the 
    documentation and/or other materials provided with the distribution.
  
  * Neither the name of Adobe Systems Incorporated nor the names of its 
    contributors may be used to endorse or promote products derived from 
    this software without specific prior written permission.

  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS
  IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO,
  THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
  PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR 
  CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
  EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
  PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
  LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
  SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
-->
<mx:HBox
	xmlns:mx="http://www.adobe.com/2006/mxml"
	xmlns:controls="com.gskinner.controls.*"
	xmlns:controls1="com.facebook.streamdemo.controls.*"
	xmlns:local="*"
	horizontalScrollPolicy="off" verticalScrollPolicy="off"
	backgroundAlpha=".5" width='100%'
	>
	
	<mx:Script>
		<![CDATA[
			import com.facebook.utils.DesktopSessionHelper;
			import com.facebook.errors.FacebookError;
			import com.facebook.data.BooleanResultData;
			import com.facebook.data.StringResultData;
			import com.facebook.data.FacebookData;
			import com.facebook.streamdemo.events.StreamEvent;
			import com.facebook.streamdemo.dialogs.MessageWindow;
			import mx.events.CloseEvent;
			import com.facebook.data.auth.ExtendedPermissionValues;
			import com.facebook.streamdemo.data.StreamModel;
			import com.facebook.data.stream.StoryType;
			import com.facebook.streamdemo.utils.TypeToIcon;
			import com.gskinner.utils.RegExpUtils;
			import com.facebook.streamdemo.ui.Assets;
			import com.facebook.streamdemo.data.FriendsModel;
			import com.facebook.streamdemo.pool.CommentRowPool;
			import com.facebook.streamdemo.ui.Styles;
			import com.facebook.streamdemo.utils.TimeFormatter;
			import com.facebook.streamdemo.data.StreamData;
			import mx.controls.HRule;
			import mx.controls.Spacer;
			import com.facebook.data.users.FacebookUser;
			import com.facebook.data.stream.PostCommentData;
			import com.chewtinfoil.utils.StringUtils;
			import com.facebook.data.stream.StreamStoryData;
			import flash.net.navigateToURL;
			import com.gskinner.utils.CallLater;
			
			protected var streamData:StreamData;
			protected var rowDataHasChanged:Boolean;
			protected var commentsSectionShouldBeVisible:Boolean;
			
			protected var _lastItem:Boolean;
			
			[Bindable]
			protected var friend:FacebookUser;
			
			// this is the content of an entry (name, link, message)
			protected static const LABEL_TEMPLATE:String = '<a href="event:{profileUrl}">{actor}</a><span class="content"> {title}</span>';
			
			protected var _desktopHelper:DesktopSessionHelper;
			
			public function set desktopHelper(value:DesktopSessionHelper):void {
				_desktopHelper = value;
			}
			
			public function setModel(value:StreamData):void {
				streamData = value;
				friend = streamData.friend;
				
				rowDataHasChanged = true;
				invalidateProperties();
			}
			
			public function set lastItem(p_bool:Boolean):void {
				_lastItem = p_bool;
				invalidateProperties();
			}
			
			override protected function commitProperties():void {
				super.commitProperties();
				
				if (rowDataHasChanged) {
					hideCommentsForm();
					draw();
					drawStoryRow();
					rowDataHasChanged = false;
				}
				
				if (divider) { divider.visible = !_lastItem; }
			}
			
			protected function draw():void {
				mainLabel.htmlText = StringUtils.supplant(LABEL_TEMPLATE, {actor:friend.name, title:RegExpUtils.parseURLs(streamData.message), profileUrl:friend.profile_url});
				dateLbl.text = TimeFormatter.dateToString(streamData.time);
				
				var ssd:StreamStoryData = streamData.data as StreamStoryData;
				
				//Hide Add like button if user can't like this story.
				var canLike:Boolean = ssd != null?ssd.likes.can_like:false;
				var hasLiked:Boolean = ssd != null?ssd.likes.user_likes:false;
				
				if (hasLiked) {
					showYouLike(true);
				} else if (canLike) {
					showYouLike(false);
				} else {
					showYouLike(false);
					likeBtn.visible = false;
					likeBtn.includeInLayout = false;
				}
				
				updateLikeCount(isNaN(streamData.likeCount)?0:streamData.likeCount);
				
				if (streamData.facebookType == StoryType.ABSENT) {
					storyIcon.includeInLayout = false;
					storyIcon.visible = false;
				} else {
					storyIcon.includeInLayout = true;
					 storyIcon.visible = true;
					
					storyIcon.source = TypeToIcon.getIcon(streamData.facebookType);
				}
				
				mainLabel.setStyleSheet(Styles.getStyleSheet('storyTitle'));
			}
			
			protected function updateLikeCount(newCount:uint):void {
				likesWrapper.visible = true;
				likesWrapper.includeInLayout = true;
				
				if (newCount > 1) {
					likeCountTxt.text = newCount + ' people like this.';
				} else if (newCount == 1) {
					likeCountTxt.text = newCount + ' person likes this.';
				} else {
					likesWrapper.visible = false;
					likesWrapper.includeInLayout = false;
					likeCountTxt.text = '';
				}
			}
			
			protected function drawStoryRow():void {
				var l:uint;
				var i:uint;
				var row:CommentRow;
				
				var story:StreamStoryData = (streamData.data as StreamStoryData);
				
				//Remove and cache all the old rows
				l = comments.numChildren;
				for (i=0;i<l;i++) {
					row = comments.getChildAt(i) as CommentRow;
					if (row) { CommentRowPool.addRow(row); }
				}
				comments.removeAllChildren();
				
				var c:CommentRow; // draws comment rows
				var posts:Array = story && story.comments != null?story.comments.posts:[]; 
				l = posts.length;
				
				if (l == 0) {
					commentsSection.visible = false;
					commentsSection.includeInLayout = false;
				} else {
					commentsSection.visible = true;
					commentsSection.includeInLayout = true;
				}
				
				for (i=0; i<l; i++) {
					var comment:PostCommentData = posts[i] as PostCommentData;
					var user:FacebookUser = FriendsModel.getFriend(comment.fromid);
					row = CommentRowPool.getRow(comment, user);
					row.addEventListener(StreamEvent.REMOVE_ROW, onRemoveRow, false, 0, true);
					row.lastItem = false;
					comments.addChild(row);
				}
				
				if (comments.numChildren != 0) {
					row.lastItem = true;
				}
				
				showYouLike(story.likes.user_likes);
				onCommentChange();
			}
			
			protected function updateCommentDividers():void {
				var l:uint = comments.numChildren;
				var row:CommentRow;
				
				for (var i:uint=0;i<l;i++) {
					row = comments.getChildAt(i) as CommentRow;
					if (row) { row.lastItem = false; }
				}
				
				var lastRow:CommentRow =  comments.getChildAt(comments.numChildren-1) as CommentRow;
				lastRow.lastItem = true;
			}
			
			protected function onRemoveRow(event:StreamEvent):void {
				var row:CommentRow = event.target as CommentRow;
				if (comments.contains(row)) {
					CommentRowPool.addRow(comments.removeChild(row) as CommentRow);
				}
				
				commentsSection.visible = true;
				commentsSection.includeInLayout = true;
				
				var l:uint = comments.numChildren;
				if (l == 0) {
					commentsSection.visible = false;
					commentsSection.includeInLayout = false;
				} else {
					updateCommentDividers();
				}
			}
			
			protected function addCommentRow(id:String):void {
				var user:FacebookUser = FriendsModel.getFriend(_desktopHelper.sessionData.uid);
				var comment:PostCommentData = new PostCommentData();
				comment.time = new Date();
				comment.id = id;
				comment.fromid = _desktopHelper.sessionData.uid;
				comment.text = commentsTxt.text;
				
				var row:CommentRow = CommentRowPool.getRow(comment, user);
				row.addEventListener(StreamEvent.REMOVE_ROW, onRemoveRow, false, 0, true);
				row.lastItem = true;
				comments.addChild(row);
				updateCommentDividers();
				
				hideCommentsForm();
				
				commentsSection.includeInLayout = true;
				commentsSection.visible = true;
			}
			
			protected function onProfileLink(event:TextEvent):void {
				navigateToURL(new URLRequest(event.text));
			}
			
			protected function onCommentChange():void {
				commentsTxt.height = commentsTxt.textHeight + 8;
				submitCommentBtn.enabled = commentsTxt.length != 0;
			}
			
			protected function showCommentsForm():void {
				commentBtn.enabled = false;
				
				commentsSectionShouldBeVisible = commentsSection.visible;
				commentsSection.includeInLayout = true;
				commentsSection.visible = true;
				
				commentWrapper.includeInLayout = true;
				commentWrapper.visible = true;
				
				commentsTxt.setFocus();
				onCommentChange();
			}
			
			protected function hideCommentsForm():void {
				commentBtn.enabled = true;
				
				commentsSection.includeInLayout = commentsSectionShouldBeVisible;
				commentsSection.visible = commentsSectionShouldBeVisible;
				
				commentWrapper.includeInLayout = false;
				commentWrapper.visible = false;
				commentsTxt.text  = '';
				onCommentChange();
			}
			
			protected function submitComment():void {
				if (_desktopHelper.checkPermission(ExtendedPermissionValues.PUBLISH_STREAM) == false) {
					askForPerms();
				} else {
					var story:StreamStoryData = (streamData.data as StreamStoryData);
					StreamModel.getInstance().addEventListener(StreamEvent.COMMENT_ADDED, onCommentAdded);
					StreamModel.addComment(story.post_id, commentsTxt.text);
					spinner.visible = true;
				} 
			}
			
			protected function onCommentAdded(event:StreamEvent):void {
				StreamModel.getInstance().removeEventListener(StreamEvent.COMMENT_ADDED, onCommentAdded);
				spinner.visible = false;
				
				var fbResult:Object = event.data;
				if (fbResult is FacebookData) {
					//Add a temporary comment, on next refresh we'll get it from Facebook.
					addCommentRow((fbResult as StringResultData).value);
				} else if (fbResult is FacebookError) {
					var err:FacebookError = fbResult as FacebookError;
					handleEditStreamError(err);
				} else {
					MessageWindow.show('Error adding comment.', 'Error', MessageWindow.OK);
				}
			}
			
			protected function handleEditStreamError(fbError:FacebookError):void {
				if (fbError.errorCode == 200) {
					_desktopHelper.revokePermissions([ExtendedPermissionValues.PUBLISH_STREAM]);
					askForPerms();
				} else {
					MessageWindow.show('Error adding comment.', 'Error', MessageWindow.OK);
				}
			}
			
			protected function askForPerms():void {
				_desktopHelper.grantPermissions([ExtendedPermissionValues.PUBLISH_STREAM]);
			}
			
			protected function showYouLike(show:Boolean):void {
				youLikeWrapper.visible = show;
				youLikeWrapper.includeInLayout = show;
				
				unLikeBtn.visible = show;
				unLikeBtn.includeInLayout = show;
				
				likeBtn.visible = !show;
				likeBtn.includeInLayout = !show;
				
				var story:StreamStoryData = (streamData.data as StreamStoryData);
				var likeCount:uint = story.likes.count;
				
				if (show && story.likes.user_likes == false) {
					likeCount++; 
				} else if(likeCount > 0) {
					likeCount--;
				}
				updateLikeCount(likeCount);
			}
			
			protected function addLike():void {
				if (_desktopHelper.checkPermission(ExtendedPermissionValues.PUBLISH_STREAM) == false) {
					askForPerms();
				} else {
					var story:StreamStoryData = (streamData.data as StreamStoryData);
					StreamModel.getInstance().addEventListener(StreamEvent.LIKE_ADDED, onLikeAdded)
					StreamModel.likeStory(story.post_id);
				}
			}
			
			protected function onLikeAdded(event:StreamEvent):void {
				StreamModel.getInstance().removeEventListener(StreamEvent.LIKE_ADDED, onLikeAdded);
				
				var fbResult:Object = event.data;
				
				if (fbResult is FacebookData) {
					if ((fbResult as BooleanResultData).value) {
						showYouLike(true);
					} else {
						askForPerms();
					}
				} else if (fbResult is FacebookError) {
					var err:FacebookError = fbResult as FacebookError;
					handleEditStreamError(err);
				} else {
					MessageWindow.show('Error adding like, please try again later.', 'Error', MessageWindow.OK);
				}
			}
			
			protected function removeLike():void {
				if (_desktopHelper.checkPermission(ExtendedPermissionValues.PUBLISH_STREAM) == false) {
					askForPerms();
				} else {
					var story:StreamStoryData = (streamData.data as StreamStoryData);
					StreamModel.getInstance().addEventListener(StreamEvent.LIKE_REMOVED, onLikeRemoved)
					StreamModel.unlikeStory(story.post_id);
				} 
			}
			
			protected function onLikeRemoved(event:StreamEvent):void {
				StreamModel.getInstance().removeEventListener(StreamEvent.LIKE_REMOVED, onLikeRemoved);
				
				var fbResult:Object = event.data;
				if (fbResult is FacebookData) {
					if ((fbResult as BooleanResultData).value == true) {
						showYouLike(false);
					} else {
						askForPerms();
					}
				} else if (fbResult is FacebookError) {
					var err:FacebookError = fbResult as FacebookError;
					handleEditStreamError(err);
				} else {
					MessageWindow.show('Error removing like, please try again later.', 'Error', MessageWindow.OK);
				}
			}
			
		]]>
	</mx:Script>
	<mx:VBox verticalGap="0" horizontalScrollPolicy="off" verticalScrollPolicy="off" width='{width}' height='100%' >
	
		<mx:HBox horizontalGap = '0' horizontalScrollPolicy="off" verticalScrollPolicy="off">
		
			<controls1:Avatar id="profilePic" width="50" height="50" source="{friend.pic_square}" previewSource="{Assets.blankAvatar}" />
			<mx:Spacer width='5'/>
			
			<mx:VBox id='content' width='{width - 60}' verticalScrollPolicy="off" horizontalScrollPolicy="off" verticalGap="0">
				<controls:HTMLText minWidth = '25' id="mainLabel" link="onProfileLink(event)" rollOver="{mainLabel.setFocus()}" selectable="true" width='{width-70}'/>
				
				<mx:HBox horizontalGap="0" verticalAlign="middle">
					<mx:Image id="storyIcon" width="16" height="16" scaleContent="false" />
					<mx:Label id="dateLbl" styleName="dateLabel" />
					<mx:Label text="." width="10" height="5" styleName="streamRowLink" paddingBottom="0" paddingLeft="0" paddingRight="0" paddingTop="0" />
					<mx:Button id="commentBtn" label="Comment" styleName="streamRowLink" click="showCommentsForm()" buttonMode="true" useHandCursor="true" paddingBottom="0" paddingLeft="0" paddingRight="0" paddingTop="0" />
					<mx:Label text="." width="10" height="5" styleName="streamRowLink" paddingBottom="0" paddingLeft="0" paddingRight="0" paddingTop="0" />
					<mx:Button label="Like" id="likeBtn" styleName="streamRowLink" click="addLike()" buttonMode="true" useHandCursor="true" paddingBottom="0" paddingLeft="0" paddingRight="0" paddingTop="0" />
					<mx:Button label="Unlike" id="unLikeBtn" styleName="streamRowLink" buttonMode="true" useHandCursor="true" click="removeLike()" paddingBottom="0" paddingLeft="0" paddingRight="0" paddingTop="0" />
				</mx:HBox>
				
				<mx:HBox width="100%" verticalAlign="middle">
					<mx:HBox id="likesWrapper" horizontalGap="0" verticalAlign="middle">
						<mx:Image width="16" height="16" source="{Assets.likeFadedIcon}" />
						<mx:Label id="likeCountTxt" />
					</mx:HBox>
					<mx:HBox id="youLikeWrapper" horizontalGap="0" verticalAlign="middle">
						<mx:Image source="{Assets.likeIconSolid}" width="16" height="16" scaleContent="false" />
						<mx:Label text="You like this." />
					</mx:HBox>
				</mx:HBox>
				
			</mx:VBox>
		</mx:HBox>
		
		<mx:VBox verticalGap='0' id='commentsSection' width='{width}' paddingLeft='14'  horizontalScrollPolicy="off" verticalScrollPolicy="off">
			<mx:HBox horizontalGap="0" width='47' height='10'>
				<mx:Spacer width='37'/>
				<mx:Canvas styleName='commentCap' width='10' height = '15'/>
			</mx:HBox>
			<mx:VBox id="comments" backgroundColor="#DEE2EA" width="{width - 26}" verticalScrollPolicy="off" horizontalScrollPolicy="off" paddingLeft = '5' paddingTop = '5' paddingBottom = '5' paddingRight = '5'/>
			<mx:HRule id='commentDivider' strokeColor="#FFFFFF" strokeWidth="1" width = '100%'/>
			<mx:VBox id="commentWrapper" includeInLayout="false" visible="false" backgroundColor="#DEE2EA" width="{comments.width}" paddingBottom="5" paddingLeft="5" paddingRight="5" paddingTop="5">
				<mx:TextArea id="commentsTxt" verticalScrollPolicy="off" focusIn="{StreamModel.pause()}" focusOut="{StreamModel.resume()}" change="onCommentChange()" width="100%" height="22" />
				<mx:HBox width="100%" horizontalAlign="right" verticalAlign="middle"  paddingBottom="0" paddingLeft="0" paddingRight="0" paddingTop="0">
					<mx:Image id="spinner" source="{Assets.spinner}" visible="false" />
					<mx:Button label="Hide" click="hideCommentsForm()" styleName="msgBtn" buttonMode="true" useHandCursor="true" />
					<mx:Button id="submitCommentBtn" label="Submit" click="submitComment()" styleName="msgBtn" buttonMode="true" useHandCursor="true" />
				</mx:HBox>
			</mx:VBox>
			<mx:Spacer height="5"/>
		</mx:VBox>
		<mx:HRule id="divider" width="97%" strokeColor="#D8DFEA" strokeWidth="1" />
		<mx:Spacer height="5" />
	</mx:VBox>
	
</mx:HBox>