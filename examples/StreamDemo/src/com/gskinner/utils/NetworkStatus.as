/*** NetworkStatus by gskinner.com. Nov 4, 2008* Visit www.gskinner.com/blog for documentation, updates and more free code.*** Copyright (c) 2008 Grant Skinner* * Permission is hereby granted, free of charge, to any person* obtaining a copy of this software and associated documentation* files (the "Software"), to deal in the Software without* restriction, including without limitation the rights to use,* copy, modify, merge, publish, distribute, sublicense, and/or sell* copies of the Software, and to permit persons to whom the* Software is furnished to do so, subject to the following* conditions:* * The above copyright notice and this permission notice shall be* included in all copies or substantial portions of the Software.* * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,* EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES* OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND* NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT* HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY,* WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING* FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR* OTHER DEALINGS IN THE SOFTWARE.**/package com.gskinner.utils {		import air.net.URLMonitor;		import flash.desktop.NativeApplication;	import flash.events.Event;	import flash.events.EventDispatcher;	import flash.events.NetStatusEvent;	import flash.events.StatusEvent;	import flash.net.URLRequest;		public class NetworkStatus extends EventDispatcher {				protected static var _instance:NetworkStatus;				protected var _isOnline:Boolean;		protected var _initted:Boolean = false;		protected var urlMonitor:URLMonitor;		protected var urlRequest:URLRequest;				public function NetworkStatus() {			if (_instance != null) { throw new Error('NetworkStatus cannot be instaniated.'); }						NativeApplication.nativeApplication.addEventListener(Event.NETWORK_CHANGE, onNetChange, false, 0, false);						urlRequest = new URLRequest();		}				public static function watchUrl(p_url:String):void { getInstance().watchUrl(p_url); }		public static function get initted():Boolean { return getInstance()._initted; }		public static function get online():Boolean { return getInstance()._isOnline; }				public static function checkStatus():void { getInstance().checkStatus(); }		public function checkStatus():void {			urlMonitor.start();		}				public function watchUrl(p_url:String):void {			urlRequest.url = p_url;			urlMonitor = new URLMonitor(urlRequest);			urlMonitor.addEventListener(StatusEvent.STATUS, onUrlStatus, false, 0, false);			urlMonitor.start();		}				protected function onUrlStatus(p_event:StatusEvent):void {			_initted = true;			switch (p_event.code) {				case 'Service.available':					setOnline(true);					break;				case 'Service.unavailable':					setOnline(false);			}		}				protected function setOnline(p_online:Boolean):void {			var dispatchChange:Boolean = _isOnline !== p_online; 			_isOnline = p_online;			if (dispatchChange) {				dispatchEvent(new NetStatusEvent(NetStatusEvent.NET_STATUS, false, false, {isOnline:_isOnline}));			}			//urlMonitor.stop();		}				protected function onNetChange(p_event:Event):void {			if (_isOnline === true || _isOnline === false) {				setOnline(!online); //Toggle the status for now, the monitor will tell us the actual status when it runs.			}			//urlMonitor.start();		}				public static function addEventListener(p_type:String, p_listener:Function, p_useCapture:Boolean=false, p_priority:int=0, p_useWeakReference:Boolean=false):void{  getInstance().addEventListener(p_type, p_listener, p_useCapture, p_priority, p_useWeakReference); }		public static function removeEventListener(p_type:String, p_listener:Function, p_useCapture:Boolean = false):void { getInstance().removeEventListener(p_type, p_listener, p_useCapture); }				protected static function getInstance():NetworkStatus { 			if (_instance == null) { _instance = new NetworkStatus(); }			return _instance;		}			}}